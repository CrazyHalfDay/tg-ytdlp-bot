#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–º–ø–∞ Firebase Realtime Database
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑ –≤ –¥–µ–Ω—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
"""

import json
import os
import sys
from datetime import datetime

try:
    from config import Config
except ImportError:
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω config.py –∏–ª–∏ –∫–ª–∞—Å—Å Config! –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ config.py.")
    sys.exit(1)

try:
    import pyrebase
    import requests
except ImportError:
    print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ pyrebase –∏ requests. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ pip.")
    sys.exit(1)

# –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—ë–º –∏–∑ config.py
FIREBASE_CONFIG = getattr(Config, 'FIREBASE_CONF', None)
FIREBASE_USER = getattr(Config, 'FIREBASE_USER', None)
FIREBASE_PASSWORD = getattr(Config, 'FIREBASE_PASSWORD', None)
OUTPUT_FILE = getattr(Config, 'FIREBASE_CACHE_FILE', 'firebase_cache.json')

if not FIREBASE_CONFIG or not FIREBASE_USER or not FIREBASE_PASSWORD:
    print("‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã –≤ config.py (FIREBASE_CONF, FIREBASE_USER, FIREBASE_PASSWORD)")
    sys.exit(1)

def download_firebase_dump():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–µ—Å—å –¥–∞–º–ø Firebase Realtime Database"""
    try:
        print(f"üîÑ Starting Firebase dump download at {datetime.now()}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
        firebase = pyrebase.initialize_app(FIREBASE_CONFIG)
        auth = firebase.auth()
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        print("üîê Authenticating with Firebase...")
        user = auth.sign_in_with_email_and_password(FIREBASE_USER, FIREBASE_PASSWORD)
        id_token = user["idToken"]
        print("‚úÖ Authentication successful")
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        print("üì• Downloading database dump...")
        url = f"{FIREBASE_CONFIG['databaseURL']}/.json?auth={id_token}"
        response = requests.get(url, timeout=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        response.raise_for_status()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            json.dump(response.json(), f, ensure_ascii=False, indent=2)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        data = response.json()
        if data:
            total_keys = len(data)
            print(f"‚úÖ Firebase database downloaded successfully!")
            print(f"üìä Total root nodes: {total_keys}")
            print(f"üíæ Saved to: {OUTPUT_FILE}")
            print(f"üìè File size: {os.path.getsize(OUTPUT_FILE)} bytes")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            print("\nüìã Database structure:")
            for key in data.keys():
                if isinstance(data[key], dict):
                    sub_keys = len(data[key])
                    print(f"  - {key}: {sub_keys} sub-nodes")
                else:
                    print(f"  - {key}: {type(data[key]).__name__}")
        else:
            print("‚ö†Ô∏è Database is empty")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error downloading Firebase dump: {e}")
        return False

def main():
    print("üöÄ Firebase Database Dumper (config-driven)")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    if not FIREBASE_CONFIG or not FIREBASE_USER or not FIREBASE_PASSWORD:
        print("‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã –≤ config.py (FIREBASE_CONF, FIREBASE_USER, FIREBASE_PASSWORD)")
        return False
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–º–ø
    success = download_firebase_dump()
    
    if success:
        print(f"\nüéâ Firebase dump completed at {datetime.now()}")
        print("üí° You can now restart your bot to use the updated cache")
    else:
        print(f"\nüí• Firebase dump failed at {datetime.now()}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 